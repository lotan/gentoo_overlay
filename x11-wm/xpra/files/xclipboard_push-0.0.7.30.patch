diff -Naur xpra.old//win32/gui.py xpra/win32/gui.py
--- xpra.old//win32/gui.py	2011-11-11 11:17:13.915358597 +0100
+++ xpra/win32/gui.py	2011-11-11 11:21:11.415859529 +0100
@@ -9,10 +9,12 @@
 import os.path
 
 from xpra.platform.client_extras_base import ClientExtrasBase, WIN32_LAYOUTS
-from xpra.platform.default_clipboard import ClipboardProtocolHelper
+#from xpra.platform.default_clipboard import ClipboardProtocolHelper
 from wimpiggy.log import Logger
 log = Logger()
 
+from xpra.win32.w32clipboard import ClipboardProtocolHelper
+assert ClipboardProtocolHelper
 
 class ClientExtras(ClientExtrasBase):
     def __init__(self, client, opts):
diff -Naur xpra.old//win32/w32clipboard.py xpra/win32/w32clipboard.py
--- xpra.old//win32/w32clipboard.py	1970-01-01 01:00:00.000000000 +0100
+++ xpra/win32/w32clipboard.py	2011-11-11 11:17:31.624244714 +0100
@@ -0,0 +1,67 @@
+import win32ui, win32clipboard, win32con, win32api, win32gui
+import gtk, gobject
+
+from wimpiggy.log import Logger
+log = Logger()
+
+class ClipboardProtocolHelper(object):
+    def __init__(self, send_packet_cb):
+        self.send = send_packet_cb
+        
+        self.hPrev = 0
+        self.first = True
+        self.win = win32ui.CreateFrame()
+        self.win.CreateWindow(None, '', win32con.WS_OVERLAPPEDWINDOW)
+
+        self.win.HookMessage(self._OnDrawClipboard, win32con.WM_DRAWCLIPBOARD)
+        self.win.HookMessage(self._OnChangeCBChain, win32con.WM_CHANGECBCHAIN)
+        self.win.HookMessage(self._OnDestroy, win32con.WM_DESTROY)
+
+        try:
+            self.hPrev = win32clipboard.SetClipboardViewer(self.win.GetSafeHwnd())
+        except win32api.error, err:
+            if win32api.GetLastError () == 0:
+                # information that there is no other window in chain
+                pass
+            else:
+                raise
+        gobject.timeout_add(10, win32gui.PumpWaitingMessages)
+
+    def _OnChangeCBChain(self, *args):
+        msg, wParam, lParam = args[-1][1:4]
+        if self.hPrev == wParam:
+            # repair the chain
+            self.hPrev = lParam
+            if self.hPrev:
+                # pass the message to the next window in chain
+                win32api.SendMessage(self.hPrev, msg, wParam, lParam)
+
+    def _OnDrawClipboard(self, *args):
+        msg, wParam, lParam = args[-1][1:4]
+        if self.first:
+            self.first = False
+        else:
+            win32clipboard.OpenClipboard()
+            self.send(["clipboard-data", win32clipboard.GetClipboardData()])
+            win32clipboard.CloseClipboard()
+            if self.hPrev:
+                # pass the message to the next window in chain
+                win32api.SendMessage(self.hPrev, msg, wParam, lParam)
+
+    def _OnDestroy(self):
+        if self.hPrev:
+            win32clipboard.ChangeClipboardChain(self.win.GetSafeHwnd(), self.hPrev)
+        else:
+            win32clipboard.ChangeClipboardChain(self.win.GetSafeHwnd(), 0)
+            
+    def send_all_tokens(self):
+        pass
+
+    def process_clipboard_packet(self, packet):
+        packet_type = packet[0]
+        if packet_type == "clipboard-data":
+            (_, data) = packet
+            win32clipboard.OpenClipboard()
+            win32clipboard.EmptyClipboard()
+            win32clipboard.SetClipboardData(win32clipboard.CF_TEXT, data)
+            win32clipboard.CloseClipboard()
diff -Naur xpra.old//xposix/xclipboard.py xpra/xposix/xclipboard.py
--- xpra.old//xposix/xclipboard.py	2011-11-11 11:17:13.913358611 +0100
+++ xpra/xposix/xclipboard.py	2011-11-11 11:27:01.524756139 +0100
@@ -3,41 +3,38 @@
 # Parti is released under the terms of the GNU GPL v2, or, at your option, any
 # later version. See the file COPYING for details.
 
-import struct
+import gobject
 import gtk
 
-from wimpiggy.lowlevel import (get_xatom, gdk_atom_objects_from_gdk_atom_array) #@UnresolvedImport
 from wimpiggy.log import Logger
 log = Logger()
 
-from xpra.platform.clipboard_base import ClipboardProtocolHelperBase
-
-class ClipboardProtocolHelper(ClipboardProtocolHelperBase):
-    """ This clipboard helper adds the ability to parse raw X11 atoms
-        to and from a form suitable for transport over the wire.
-    """
-
+class ClipboardProtocolHelper(object):
     def __init__(self, send_packet_cb):
-        ClipboardProtocolHelperBase.__init__(self, send_packet_cb, ["CLIPBOARD", "PRIMARY", "SECONDARY"])
+        self.send = send_packet_cb
 
-    def _do_munge_raw_selection_to_wire(self, type, format, data):
-        if format == 32:
-            if type in ("ATOM", "ATOM_PAIR"):
-                # Convert to strings and send that. Bizarrely, the atoms are
-                # not actual X atoms, but an array of GdkAtom's reinterpreted
-                # as a byte buffer.
-                atoms = gdk_atom_objects_from_gdk_atom_array(data)
-                return ("atoms", [str(atom) for atom in atoms])
-            else:
-                sizeof_long = struct.calcsize("@L")
-                format = "@" + "L" * (len(data) // sizeof_long)
-                ints = struct.unpack(format, data)
-                return ("integers", ints)
-        return ClipboardProtocolHelperBase._do_munge_raw_selection_to_wire(self, type, format, data)
-
-    def _munge_wire_selection_to_raw(self, encoding, type, format, data):
-        if encoding == "atoms":
-            d = gtk.gdk.display_get_default()
-            ints = [get_xatom(d, a) for a in data]
-            return struct.pack("@" + "L" * len(ints), *ints)
-        return ClipboardProtocolHelperBase._munge_wire_selection_to_raw(self, encoding, type, format, data)
+        self._clipboard = gtk.clipboard_get()
+        self._text = self._clipboard.wait_for_text()
+        gobject.timeout_add(500, self._poll_clipboard)
+
+    def _clipboard_text_received(self, clipboard, text, data):
+        if not text or text == '':
+            return
+        if text <> self._text:
+            self._text = text
+            self.send(["clipboard-data", text])
+
+    def _poll_clipboard(self):
+        self._clipboard.request_text(self._clipboard_text_received)
+        return True
+ 
+    # Used by the client during startup:
+    def send_all_tokens(self):
+    	pass
+ 
+    def process_clipboard_packet(self, packet):
+        packet_type = packet[0]
+        if packet_type == "clipboard-data":
+            (_, data) = packet
+            self._clipboard.set_text(data)
+            self._clipboard.store()
