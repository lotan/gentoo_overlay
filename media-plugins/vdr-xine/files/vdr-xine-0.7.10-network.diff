patch rewritten to fix Hunk's and Fuzz's
basic vdr-xine-0.7.9-network.diff

Joerg Bornkessel <hd_brummy@gentoo.org> 2007.01.03
diff -Naur xine-0.7.10.orig/xine.c xine-0.7.10/xine.c
--- xine-0.7.10.orig/xine.c	2007-01-03 17:53:07.502935839 +0100
+++ xine-0.7.10/xine.c	2007-01-03 17:56:58.600105316 +0100
@@ -33,7 +33,7 @@
   
 public:
   PluginXine::cXineLib *m_xineLib;
-  int m_instanceNo;
+  in_addr_t m_bindIp;
   
   cPluginXine(void);
   virtual ~cPluginXine();
@@ -65,7 +65,7 @@
   , m_remote(0)
   , m_remoteOn(false)
   , m_xineLib(0)
-  , m_instanceNo(-1)
+  , m_bindIp(0)
 {
   // Initialize any member variables here.
   // DON'T DO ANYTHING ELSE THAT MAY HAVE SIDE EFFECTS, REQUIRE GLOBAL
@@ -82,7 +82,7 @@
   //Return a string that describes all known command line options.
   //"  -         --             x                                                   \n"
   return
-    "  -i N                     instance number to append to FIFO directory\n"
+	"  -i ip                    ip address to bind to\n"
     "  -q                       turn off debug messages on console\n"
     "  -r                       turn on remote (pressing keys in xine controls VDR)\n"
 #if APIVERSNUM >= 10320
@@ -106,11 +106,9 @@
     {
     case 'i':
       {
-        const int no = ::atoi(::optarg);
-        if (no < 0)
+		m_bindIp = inet_addr(::optarg);
+        if (m_bindIp == INADDR_NONE)
           return false;
-        
-        m_instanceNo = no;
       }
       break;
       
@@ -259,9 +257,9 @@
 
 namespace PluginXine
 {
-  int GetInstanceNo(cPlugin *const plugin)
+  int GetBindIp(cPlugin *const plugin)
   {
-    return ((cPluginXine *)plugin)->m_instanceNo;
+	return ((cPluginXine *)plugin)->m_bindIp;
   }
 
   cXineLib *&GetXineLib(cPlugin *const plugin)
diff -Naur xine-0.7.10.orig/xineLib.c xine-0.7.10/xineLib.c
--- xine-0.7.10.orig/xineLib.c	2007-01-03 17:53:07.510936296 +0100
+++ xine-0.7.10/xineLib.c	2007-01-03 18:08:55.626772628 +0100
@@ -1985,7 +1985,7 @@
   
 #endif
 
-  extern int GetInstanceNo(cPlugin *const plugin);
+  extern int GetBindIp(cPlugin *const plugin);
   extern cXineLib *&GetXineLib(cPlugin *const plugin);
   
   cXineLib::cXineLib(cPlugin *const plugin, const cXineSettings &settings, cMutex &osdMutex, cXineRemote *const remote)
@@ -1993,6 +1993,10 @@
       , m_plugin(plugin)
       , m_settings(settings)
       , m_osdFlushRequired(false)
+	  , fd_fifo0_serv(-1)
+      , fd_result_serv(-1)
+      , fd_control_serv(-1)
+      , fd_remote_serv(-1)
       , fd_fifo0(-1)
       , fd_result(-1)
       , fd_control(-1)
@@ -2011,13 +2015,8 @@
   {
     m_fifoDir = FIFO_DIR;
 
-    if (GetInstanceNo(plugin) >= 0)
-    {
-      char s[ 20 ];
-      ::sprintf(s, "%d", GetInstanceNo(plugin));
-      
-      m_fifoDir += s;
-    }
+    m_bindIp = GetBindIp(plugin);
+    m_fifoDir += itoa(m_bindIp);
 
     m_fifoNameControl    = m_fifoDir + "/stream.control";
     m_fifoNameResult     = m_fifoDir + "/stream.result";
@@ -2113,9 +2112,37 @@
     m_eventSink = eventSink;
   }
 
+  int cXineLib::CreateServerSocket(unsigned short port)
+  {
+   int fd;
+   int onoff = 1;
+   struct sockaddr_in sain;
+
+   if ((fd = ::socket(PF_INET,SOCK_STREAM,0)) < 0) {
+       perror("socket failed.");
+       return -1;
+   }
+
+   sain.sin_addr.s_addr = m_bindIp;
+   sain.sin_port = htons(port);
+
+   ::setsockopt(fd,SOL_SOCKET,SO_REUSEADDR,&onoff, sizeof(int) );
+
+   if (::bind(fd,(struct sockaddr*)&sain, sizeof(sain)) != 0) {
+       perror("bind failed.");
+       return -1;
+   }
+
+   if (::listen(fd,1) != 0) {
+       printf("listen failed.");
+       return -1;
+   }
+   return fd;
+  }
+
   bool cXineLib::Open()
   {
-    ::unlink(m_fifoNameExtControl.c_str());
+/*    ::unlink(m_fifoNameExtControl.c_str());
     ::unlink(m_fifoNameExtResult.c_str());
     ::unlink(m_fifoNameControl.c_str());
     ::unlink(m_fifoNameResult.c_str());
@@ -2132,6 +2159,7 @@
 	  perror(msg.c_str()); \
 	  esyslog("%s", msg.c_str()); \
 	  ::umask(origUmask); \
+
 	  return false; \
 	} } while (0)
 
@@ -2154,7 +2182,27 @@
 #undef MkFifo
 
     ::umask(origUmask);
-    
+*/    
+/*
+{ .path = FIFO_STREAM,           .mode = 0644, .port = 18701 },
+{ .path = FIFO_STREAM_CONTROL,   .mode = 0644, .port = 18702 },
+{ .path = FIFO_STREAM_RESULT,    .mode = 0666, .port = 18703 },
+{ .path = FIFO_STREAM_EVENT,     .mode = 0666, .port = 18704 },
+
+*/
+   /* sockets - create the server sockets */
+   if ((fd_fifo0_serv = CreateServerSocket(18701)) == -1)
+       return false;
+
+   if ((fd_control_serv = CreateServerSocket(18702)) == -1)
+       return false;
+
+   if ((fd_result_serv = CreateServerSocket(18703)) == -1)
+       return false;
+
+   if ((fd_remote_serv = CreateServerSocket(18704)) == -1)
+       return false;
+ 
     if (!Start())
       return false;
 
@@ -2179,13 +2227,18 @@
       disconnect();
     }
     
-    ::unlink(m_fifoNameExtControl.c_str());
+/*    ::unlink(m_fifoNameExtControl.c_str());
     ::unlink(m_fifoNameExtResult.c_str());
     ::unlink(m_fifoNameControl.c_str());
     ::unlink(m_fifoNameResult.c_str());
     ::unlink(m_fifoNameRemote.c_str());
     ::unlink(m_fifoNameStream.c_str());
-    ::rmdir(m_fifoDir.c_str());
+    ::rmdir(m_fifoDir.c_str()); */
+
+   ::close(fd_remote_serv);
+   ::close(fd_result_serv);
+   ::close(fd_control_serv);
+   ::close(fd_fifo0_serv);
   }
 
   void cXineLib::internalPaused(const bool paused)
@@ -2437,6 +2490,27 @@
 
 //    fprintf(stderr, "Action done\n");
   }
+
+int cXineLib::SocketAcceptHelper(int fd)
+{
+      // use cPoller for checking server socket for incoming requests
+      cPoller poller(fd,0); /* POLLIN */
+      struct sockaddr sain;
+      socklen_t len = sizeof(sain);
+      int client;
+
+//      ::fprintf(stderr,"vdr-xine: polling for connection on %d...\n",fd);
+      if (!poller.Poll(100))
+              return -1;
+
+//      ::fprintf(stderr,"vdr-xine: incoming requests on %d\n",fd);
+      if ((client = ::accept(fd,(struct sockaddr *) &sain,&len)) == -1) {
+              ::fprintf(stderr,"vdr-xine: fifo0 failed to accept...\n");
+              return -1;
+      }
+//      ::fprintf(stderr,"vdr-xine: successful request on %d (client: %d)\n",fd,client);
+      return client;
+}
   
   bool cXineLib::checkXineVersion()
   {
@@ -2458,6 +2532,7 @@
       
 //    if (-1 == fd_fifo0)
 //    {
+/*
       fd_fifo0 = ::open(m_fifoNameStream.c_str(), O_WRONLY | O_NONBLOCK);
       if (-1 == fd_fifo0)
         return false;
@@ -2473,7 +2548,24 @@
 
       ::fcntl(fd_fifo0 , F_SETFL, ~O_NONBLOCK & ::fcntl(fd_fifo0 , F_GETFL, 0));
       ::fcntl(fd_remote, F_SETFL, ~O_NONBLOCK & ::fcntl(fd_remote, F_GETFL, 0));
-      
+*/      
+     /* sockets */
+
+     if (fd_fifo0_serv == -1)
+         return false;
+
+     if ((fd_fifo0 = SocketAcceptHelper(fd_fifo0_serv)) == -1)
+         return false;
+
+     if ((fd_control = SocketAcceptHelper(fd_control_serv)) == -1)
+         return false;
+
+     if ((fd_result = SocketAcceptHelper(fd_result_serv)) == -1)
+         return false;
+
+     if ((fd_remote = SocketAcceptHelper(fd_remote_serv)) == -1)
+         return false;
+
       internalPaused(false);
       
       m_frozen = false;
diff -Naur xine-0.7.10.orig/xineLib.h xine-0.7.10/xineLib.h
--- xine-0.7.10.orig/xineLib.h	2007-01-03 17:53:07.510936296 +0100
+++ xine-0.7.10/xineLib.h	2007-01-03 18:11:13.306618554 +0100
@@ -88,6 +88,7 @@
     string m_fifoNameStream;
     string m_fifoNameExtControl;
     string m_fifoNameExtResult;
+	in_addr_t m_bindIp;
 
   private:
     cPlugin *const m_plugin;
@@ -139,8 +140,13 @@
       return fd_remote;
     }
     
-  private:    
+  private:
+ /* sockets */
+    int CreateServerSocket(unsigned short port);
+    int SocketAcceptHelper(int fd);
+    int fd_fifo0_serv, fd_result_serv, fd_control_serv, fd_remote_serv;    
     int fd_fifo0, fd_result, fd_control, fd_remote;
+
     cMutex m_ioMutex, m_dataMutex, m_disconnectMutex;
     cMutex &m_osdMutex;
 
